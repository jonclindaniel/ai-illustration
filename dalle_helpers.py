# Functions for generating/editing images as in the article
# "Artificial Intelligence and Archaeological Illustration"
#
# Code Written By: Jon Clindaniel
#
# For import/use instructions, see README.md

import os
import openai
import requests
import re

# Load key from environment variable
openai.api_key = os.getenv("OPENAI_API_KEY")

def download_images(img_urls):
    '''
    Given a list of OpenAI urls to generated images, downloads images to
    working directory
    Input: list of strings (urls)
    Output: No output (prints if downloaded/failed to download)
    '''
    for il in img_urls:
        try:
            r = requests.get(il)
            file_path = re.findall('/(img.+\.png)', il)[0]
            with open(file_path, 'wb') as output:
                output.write(r.content)
            print('Downloaded {} to working directory'.format(file_path))
        except:
            print('Failed to download {}'.format(il))


def generate_images(input_text, n=1, size='1024x1024'):
    '''
    Uses OpenAI image generation API to generate images based on input text
    Input: `input_text` (string): describes image to be generated,
           `n` (integer from 1-10): number of images to generate,
           `size` (string): "256x256", "512x512", or "1024x1024" pixels
    Output: No output (prints if API call failed)
    '''
    try:
        r_openai = openai.Image.create(
            prompt=input_text,
            n=n,
            size=size
        )
    except openai.error.OpenAIError as e:
        print(e.http_status)
        print(e.error)

    # Generate list of URLs for the `download_images` function to process
    img_urls = [i['url'] for i in r_openai['data']]
    download_images(img_urls)


def edit_image(input_text, original_image, image_mask, n=1, size='1024x1024',
               outpainting=False):
    '''
    Uses OpenAI image generation API to edit images based on input text and
    provided image mask
    Input: `input_text` (string): describes image edits to be generated in
                erased sections of image mask,
            `original_image` (string): path to original .png image generated by
                DALL-E (or other square image of size 256x256, 512x512,
                or 1024x1024)
            `image_mask` (string): path to RGBA image mask with erased section
                in which image generation will occur (background canvas should
                be transparent)
           `n` (integer from 1-10): number of images to generate,
           `size` (string): "256x256", "512x512", or "1024x1024" pixels,
           `outpainting` (boolean): indicate whether edit is being made inside
                the frame of an existing image (False), or if the image is being
                extended via "outpainting" (True).
    Output: No output (prints if API call failed)
    '''    
    if outpainting:
        # If extending the image frame via outpainting, will need to pass in
        # the image mask as the original image and splice resulting output
        # back together with the original image locally
        original_image = image_mask
    try:
        r_openai = openai.Image.create_edit(
            image=open(original_image, "rb"),
            mask=open(image_mask, "rb"),
            prompt = input_text,
            n=n,
            size=size
        )
    except openai.error.OpenAIError as e:
        print(e.http_status)
        print(e.error)

    # Generate list of URLs for the `download_images` function to process
    img_urls = [i['url'] for i in r_openai['data']]
    download_images(img_urls)